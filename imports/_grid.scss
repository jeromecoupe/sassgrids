// -------------------------------------
// =grid configuration
// -------------------------------------

/**
 * Gutter between grid units
 *
 * Use only fixed value (em, rem, px)
 */

$grid-gutter: 40px !default;

/**
 * Number of columns
 *
 * Always use a number or a list of numbers
 * You can combine two or more grids
 * Be careful with this, it generates quite a few classes per item in the list
 * combined with many breakpoints, it can generate a lot of classes
 */

$grid-columns: (10, 12) !default;

/**
 * Breakpoints defined using a nested Sass map
 *
 * - name: name of the breakpoint (also used to namespace grid classes)
 * - query: media query for the named breakpoint
 * - generate-grid-classes: generate namespaced grid classes based on breakpoint or not
 *
 * Default sizes
 *
 * - small:    500px    31.25em
 * - medium:   760px    47.5em
 * - large:    1024px   64em
 * - xlarge:   1140px   71.25em
 */

$breakpoints-list: (
  "small": (
    query: "all and (min-width: 31.25em)",
    generate-grid-classes: true
  ),
  "medium": (
    query: "all and (min-width: 47.5em)",
    generate-grid-classes: true
  ),
  "large": (
    query: "all and (min-width: 64em)",
    generate-grid-classes: true
  ),
  "xlarge": (
    query: "all and (min-width: 71.25em)",
    generate-grid-classes: false
  )
) !default;

/**
 * Use Order classes
 *
 * - Flexbox has an order property allowing you to diversge from source order
 * - Order classes are using that order property
 * - switch to "false" if you don't need those classes
 */

$grid-orderclasses: false !default;


/**
 * Use silent classes
 *
 * - switch to "true" if you want to use @extend and silent classes
 */

$grid-silent-classes: false !default;


/*
 * Build class types (silent or not)
 */

$grid-class-type: unquote(".");

@if ($grid-silent-classes == true)
{
  $grid-class-type: unquote("%");
}


// -------------------------------------
// =grid
// -------------------------------------

/**
 * Define grid
 *
 * [1] grid usable on lists
 * [2] kill default padding and margin
 * [3] display flex
 *     - default direction is row
 *     - children wrap on multiple lines by default
 *     - children jutified left on main axis
 *     - children streched on cross-axis
 * [4] compensating left padding of leftmost .grid__unit in .grid
 */

#{$grid-class-type}grid
{
    list-style: none;                    // [1]
    margin: 0;                           // [2]
    padding: 0;                          // [2]
    display: flex;                       // [3]
    flex-direction: row;                 // [3]
    flex-wrap: wrap;                     // [3]
    justify-content: flex-start;         // [3]
    align-items: stretch;                // [3]
    margin-left: ($grid-gutter * -1);    // [4]
}


/**
 * Grid units
 *
 * [1] allows for padding without modifying the box width
 * [2] gutters created using padding
 * [3] Items take up all available space on main axis by default
 *   - if the .grid--nowrap modifer is used, items will shrink,
 *     be on the same line and have identical sizes
 */

#{$grid-class-type}grid__unit
{
  margin: 0;
  padding: 0;
  box-sizing: border-box;              // [1]
  padding-left: $grid-gutter;          // [2]
  flex: 1 1 100%;                      // [3]
}


// -------------------------------------
// =grid modifiers
// -------------------------------------

/**
 * grid aligned center
 */

#{$grid-class-type}grid--center
{
  justify-content: center;
}


/**
 * grid aligned right
 */

#{$grid-class-type}grid--right
{
  justify-content: flex-end;
}


/**
 * grid vertical aligned middle
 */

#{$grid-class-type}grid--middle
{
  align-items: center;
}


/**
 * grid vertical aligned bottom
 */

#{$grid-class-type}grid--bottom
{
  align-items: flex-end;
}


/**
 * grid gutterless
 */

#{$grid-class-type}grid--gutterless
{
  margin-left: 0;

  & > #{$grid-class-type}grid__unit
  {
    padding-left: 0;
  }
}


/**
 * grid nowrap
 * when switched on, grid__unit do not wrap anymore and all share the same proportions
 */

#{$grid-class-type}grid--nowrap
{
  flex-wrap: nowrap;
}

// -------------------------------------
// =Create proportional grid classes
// -------------------------------------

/**
 * - Loop through each value in the list
 * - Create corresponding columns classes
 */

@mixin make-classes($namespace:"")
{
  // Create main "full" grid classes
  #{$grid-class-type}grid__unit--#{$namespace}full { flex: 0 0 100%; }

  /**
   * Create main grid classes for each column in the grids
   */
  @each $columns in $grid-columns
  {
    @if type-of($columns) != 'number'
    {
      @error "$grid-columns must be a number or a list of numbers";
    }

    @for $i from 1 to $columns
    {
      // Create main grid classes
      #{$grid-class-type}grid__unit--#{$namespace}#{$i}of#{$columns} { flex: 0 0 percentage( $i / $columns ); }
    }

    // Create order classes if needed
    @if $grid-orderclasses
    {
      @for $i from 1 through $columns
      {
        // Create order classes
        #{$grid-class-type}grid__unit--#{$namespace}order#{$i}   { order: $i; }
      }
    }
  }
}

// -------------------------------------
// =export grid in all media-queries
// -------------------------------------

/**
 * In SASS, you cannot extend classes that are not in the same media queries / context
 *
 * - The code below generate (silent) classes for all the defined media queries breakpoints
 * - This implies that you are using a mobile first approach
 */

/**
 * include basic non-namespaced (silent) classes without any media queries
 */

@include make-classes();


/**
 * generate namespaced (silent) classes for all defined breakpoints
 */

@each $breakpoint-name, $breakpoint-params in $breakpoints-list
{
  $breakpoint-query: map-get($breakpoint-params, query);
  $breakpoint-grid:  map-get($breakpoint-params, generate-grid-classes);

  @if ($breakpoint-grid == true)
  {
    @media #{$breakpoint-query} {
      @include make-classes("#{$breakpoint-name}-");
    }
  }
}
