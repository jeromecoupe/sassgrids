// -------------------------------------
// =grid configuration
// -------------------------------------

/*
 * Gutter between grid units
 *
 * Use only fixed value (em, rem, px)
*/

$grid-gutter: 40px !default;


/*
 * Breakpoints defined using a nested Sass map
 *
 * - name: name of the breakpoint (also used to namespace grid classes)
 * - query: media query for the named breakpoint
 * - generate-grid-classes: generate namespaced grid classes based on breakpoint or not
 *
 * Default sizes
 *
 * - small:    500px    31.25em
 * - medium:   760px    47.5em
 * - large:    1024px   64em
 * - xlarge:   1140px   71.25em
 *
*/

$breakpoints-list: (
  "small": (
    query: "all and (min-width: 31.25em)",
    generate-grid-classes: true
  ),
  "medium": (
    query: "all and (min-width: 47.5em)",
    generate-grid-classes: true
  ),
  "large": (
    query: "all and (min-width: 64em)",
    generate-grid-classes: true
  ),
  "xlarge": (
    query: "all and (min-width: 71.25em)",
    generate-grid-classes: false
  )
) !default;

/*
 * Push and Pull classes
 *
 * switch to "false" if you don't need them
*/

$grid-orderclasses: false !default;


/*
 * Use silent classes
 *
 * switch to "true" if you want to use @extend and silent classes
*/

$grid-silent-classes: false !default;

/*
 * Build class prefixes (silent or not)
*/

$grid-class-type: unquote(".");

@if ($grid-silent-classes == true)
{
  $grid-class-type: unquote("%");
}


// -------------------------------------
// =grid building
// -------------------------------------

/*
 * Define grid
 *
 * [1] grid usable on lists
 * [2] kill default padding and margin
 * [3] display flex
 *     - children wrap on multiple lines by default
 *     - children jutified left on main axis
 *     - children streched on cross-axis
 * [4] compensating left padding of leftmost .grid__unit in .grid
*/

#{$grid-class-type}grid
{
    list-style: none;                    // [1]
    margin: 0;                           // [2]
    padding: 0;                          // [2]
    display: flex;                       // [3]
    flex-direction: row;                 // [3]
    flex-wrap: wrap;                     // [3]
    justify-content: flex-start;         // [3]
    align-items: stretch;                // [3]
    margin-left: ($grid-gutter * -1);    // [4]
}


/*
 * Grid units
 *
 * - 1. allows for padding without modifying the box width
 * - 2. gutters created using padding
 * - 3. Items take up all available space on main axis
*/

#{$grid-class-type}grid__unit
{
  margin: 0;
  padding: 0;
  box-sizing: border-box;              // [1]
  padding-left: $grid-gutter;          // [2]
  flex: 0 0 100%;                      // [3]
}


/**
*
* grid aligned center
*
*/

#{$grid-class-type}grid--center
{
  justify-content: center;
}


/**
*
* grid aligned right
*
*/

#{$grid-class-type}grid--right
{
  justify-content: flex-end;
}

/**
*
* grid vertical aligned middle
*
*/

#{$grid-class-type}grid--middle
{
  align-items: center;
}

/**
*
* grid vertical aligned bottom
*
*/

#{$grid-class-type}grid--bottom
{
  align-items: flex-end;
}


/**
*
* grid gutterless
*
*/

#{$grid-class-type}grid--gutterless
{
  margin-left: 0;

  & > #{$grid-class-type}grid__unit
  {
    padding-left: 0;
  }
}

/**
*
* grid nowrap
*
*/

#{$grid-class-type}grid--nowrap
{
  flex-wrap: nowrap;

  & > #{$grid-class-type}grid__unit
  {
    flex: 0 1 100%;
  }
}


// -------------------------------------
// =Default proportional grid classes
// -------------------------------------

@mixin mainclasses($namespace:"")
{
  #{$grid-class-type}grid__unit--#{$namespace}full    { flex: 0 1 100%; }

  #{$grid-class-type}grid__unit--#{$namespace}1of10   { flex: 0 1 (1/10 * 100%); }
  #{$grid-class-type}grid__unit--#{$namespace}2of10   { flex: 0 1 (2/10 * 100%); }
  #{$grid-class-type}grid__unit--#{$namespace}3of10   { flex: 0 1 (3/10 * 100%); }
  #{$grid-class-type}grid__unit--#{$namespace}4of10   { flex: 0 1 (4/10 * 100%); }
  #{$grid-class-type}grid__unit--#{$namespace}5of10   { flex: 0 1 (5/10 * 100%); }
  #{$grid-class-type}grid__unit--#{$namespace}6of10   { flex: 0 1 (6/10 * 100%); }
  #{$grid-class-type}grid__unit--#{$namespace}7of10   { flex: 0 1 (7/10 * 100%); }
  #{$grid-class-type}grid__unit--#{$namespace}8of10   { flex: 0 1 (8/10 * 100%); }
  #{$grid-class-type}grid__unit--#{$namespace}9of10   { flex: 0 1 (9/10 * 100%); }

  #{$grid-class-type}grid__unit--#{$namespace}1of12   { flex: 0 1 (1/12 * 100%); }
  #{$grid-class-type}grid__unit--#{$namespace}2of12   { flex: 0 1 (2/12 * 100%); }
  #{$grid-class-type}grid__unit--#{$namespace}3of12   { flex: 0 1 (3/12 * 100%); }
  #{$grid-class-type}grid__unit--#{$namespace}4of12   { flex: 0 1 (4/12 * 100%); }
  #{$grid-class-type}grid__unit--#{$namespace}5of12   { flex: 0 1 (5/12 * 100%); }
  #{$grid-class-type}grid__unit--#{$namespace}6of12   { flex: 0 1 (6/12 * 100%); }
  #{$grid-class-type}grid__unit--#{$namespace}7of12   { flex: 0 1 (7/12 * 100%); }
  #{$grid-class-type}grid__unit--#{$namespace}8of12   { flex: 0 1 (8/12 * 100%); }
  #{$grid-class-type}grid__unit--#{$namespace}9of12   { flex: 0 1 (9/12 * 100%); }
  #{$grid-class-type}grid__unit--#{$namespace}10of12  { flex: 0 1 (10/12 * 100%); }
  #{$grid-class-type}grid__unit--#{$namespace}11of12  { flex: 0 1 (11/12 * 100%); }
}


// -------------------------------------
// =Add order classes
// -------------------------------------

/*
 * Change the order of grid__item compared to source order
 *
*/

@mixin orderclasses($namespace:"")
{
  #{$grid-class-type}grid__unit--#{$namespace}order1   { order: 1; }
  #{$grid-class-type}grid__unit--#{$namespace}order2   { order: 2; }
  #{$grid-class-type}grid__unit--#{$namespace}order3   { order: 3; }
  #{$grid-class-type}grid__unit--#{$namespace}order4   { order: 4; }
  #{$grid-class-type}grid__unit--#{$namespace}order5   { order: 5; }
  #{$grid-class-type}grid__unit--#{$namespace}order6   { order: 6; }
  #{$grid-class-type}grid__unit--#{$namespace}order7   { order: 7; }
  #{$grid-class-type}grid__unit--#{$namespace}order8   { order: 8; }
  #{$grid-class-type}grid__unit--#{$namespace}order9   { order: 9; }
  #{$grid-class-type}grid__unit--#{$namespace}order10  { order: 10; }
  #{$grid-class-type}grid__unit--#{$namespace}order11  { order: 11; }
  #{$grid-class-type}grid__unit--#{$namespace}order12  { order: 12; }
}

// -------------------------------------
// =export grid in all media-queries
// -------------------------------------

/*
 * In SASS, you cannot extend classes that are not in the same media queries / context
 *
 * - The code belows generate (silent) classes for all the defined media queries breakpoints
 * - This implies that you are using a mobile first approach
*/


/*
 * include basic non-namespaced (silent) classes without any media queries
*/

@include mainclasses();
@if $grid-orderclasses { @include orderclasses(); }


/*
 * include namespaced (silent) classes for all defined breakpoints
*/

@each $breakpoint-name, $breakpoint-params in $breakpoints-list
{
  $breakpoint-query: map-get($breakpoint-params, query);
  $breakpoint-grid: map-get($breakpoint-params, generate-grid-classes);

  @if ($breakpoint-grid == true)
  {
    @media #{$breakpoint-query} {

      // generate default grid classes for all media queries
      @include mainclasses("#{$breakpoint-name}-");

      // generate order grid classes for all media queries
      @if $grid-orderclasses { @include orderclasses("#{$breakpoint-name}-"); }
    }
  }
}
