// =grid configuration
// #####################################
//gutter: only use fixed values (px and rem)
$gutter: 20px;

//breakpoints: defined using SASS list
// the first item defines the prefix of your namespaced classes and the second your media query parameter
// You can then use the namespaced classes in sccs: %medium-span-1of2
$breakpoints: "medium" "min-width:37.5em", "large" "min-width:71.25em";

// =box sizing
// #####################################
@mixin box-sizing($type:border-box)
{
    -moz-box-sizing: $type;
    -webkit-box-sizing: $type;
    box-sizing: $type;
}

// =media-queries
// #####################################
@mixin mq($media-query)
{
	@each $breakpoint in $breakpoints
	{
		$prefix:	nth($breakpoint, 1);
		$param: 	nth($breakpoint, 2);

		@if ($prefix != "") and ($param !="")
		{
			@if ($media-query == $prefix)
			{
				@media only screen and (#{$param}) { @content; }
			}
		}
		@else
		{
			@warn "media queries parameters not defined";
		}
	}
}


// =grid
// #####################################
@mixin mygrid($namespace:"")
{
	//create namespace
	@if ($namespace != "")
	{
		$namespace:"#{$namespace}-";
	}

	// use negative margins to reset margins on nested grids
	%grid-nested
	{
		margin:auto (-($gutter / 2));
	}

	// - 1. grid modules are 100% by default (you have to specify desired width in all media queries, otherwise it will not work)
	// - 2. allow for paddings using pixels and rems
	// - 3. gutters created using padding
	// - 4. using inline-block to stack the modules side by side
	// - 5. align top of modules

	%grid-module
	{
		width:100%;                         // [1]
		@include box-sizing(border-box);    // [2]
		padding:0 ($gutter / 2);            // [3]
		display:inline-block;               // [4]
		vertical-align:top;                 // [5]
	}

	%#{$namespace}span-full
	{
		width:100%;
	}

	@for $i from 1 through 12
	{
		@for $j from 1 to ($i)
		{
			%#{$namespace}span-#{$j}of#{$i}
			{
				width:(100% / $i) * $j;
			}
		}
	}
}

// =export grid in all media-queries
// #####################################
// the order is important here as it determines the order of CSS rules in generated file
// note that, in your SCSS, you need to define a width for each media queries

@include mygrid();

@each $breakpoint in $breakpoints
{
	$prefix: nth($breakpoint, 1);

	@if ($prefix != "")
	{
		@include mq($prefix)
		{
			@include mygrid("#{$prefix}");
		}
	}
	@else
	{
		@warn "media queries prefixes not defined";
	}
}